// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: planets.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPlanet = `-- name: CreatePlanet :one
INSERT INTO planets (player_id, name)
VALUES ($1, $2)
RETURNING id, player_id, name, resources, defense_level, current_wave, health, updated_at, created_at
`

type CreatePlanetParams struct {
	PlayerID uuid.UUID `json:"player_id"`
	Name     string    `json:"name"`
}

func (q *Queries) CreatePlanet(ctx context.Context, arg CreatePlanetParams) (Planet, error) {
	row := q.db.QueryRow(ctx, createPlanet, arg.PlayerID, arg.Name)
	var i Planet
	err := row.Scan(
		&i.ID,
		&i.PlayerID,
		&i.Name,
		&i.Resources,
		&i.DefenseLevel,
		&i.CurrentWave,
		&i.Health,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deletePlanet = `-- name: DeletePlanet :exec
DELETE FROM planets
WHERE id = $1
`

func (q *Queries) DeletePlanet(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePlanet, id)
	return err
}

const getPlanetByPlayerID = `-- name: GetPlanetByPlayerID :one
SELECT id, player_id, name, resources, defense_level, current_wave, health, updated_at, created_at FROM planets
WHERE player_id = $1
`

func (q *Queries) GetPlanetByPlayerID(ctx context.Context, playerID uuid.UUID) (Planet, error) {
	row := q.db.QueryRow(ctx, getPlanetByPlayerID, playerID)
	var i Planet
	err := row.Scan(
		&i.ID,
		&i.PlayerID,
		&i.Name,
		&i.Resources,
		&i.DefenseLevel,
		&i.CurrentWave,
		&i.Health,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updatePlanetState = `-- name: UpdatePlanetState :exec
UPDATE planets
SET resources = $2,
    defense_level = $3,
    current_wave = $4,
    health = $5,
    updated_at = now()
WHERE id = $1
`

type UpdatePlanetStateParams struct {
	ID           uuid.UUID   `json:"id"`
	Resources    pgtype.Int4 `json:"resources"`
	DefenseLevel pgtype.Int4 `json:"defense_level"`
	CurrentWave  pgtype.Int4 `json:"current_wave"`
	Health       pgtype.Int4 `json:"health"`
}

func (q *Queries) UpdatePlanetState(ctx context.Context, arg UpdatePlanetStateParams) error {
	_, err := q.db.Exec(ctx, updatePlanetState,
		arg.ID,
		arg.Resources,
		arg.DefenseLevel,
		arg.CurrentWave,
		arg.Health,
	)
	return err
}
